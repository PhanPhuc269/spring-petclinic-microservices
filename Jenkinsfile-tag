pipeline {
    agent any

    environment {
        DOCKERHUB_REPO = 'phanphuc269/' // Thay b·∫±ng repo DockerHub c·ªßa b·∫°n
        GIT_TAG = '' // s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong stage
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    // L·∫•y t√™n tag (n·∫øu l√† tag build)
                    GIT_TAG = sh(script: 'git describe --tags --exact-match || true', returnStdout: true).trim()

                    if (!GIT_TAG) {
                        error("‚ùå Not a tag build. Exiting.")
                    }

                    echo "üöÄ Running tag build for tag: ${GIT_TAG}"
                }
            }
        }

        stage('Build & Push All Services') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        sh "echo \$DOCKER_PASS | docker login -u \$DOCKER_USER --password-stdin"

                        def serviceList = [
                            "spring-petclinic-admin-server",
                            "spring-petclinic-api-gateway",
                            "spring-petclinic-config-server",
                            "spring-petclinic-customers-service",
                            "spring-petclinic-discovery-server",
                            "spring-petclinic-vets-service",
                            "spring-petclinic-visits-service"
                        ]

                        def builds = [:]

                        serviceList.each { svc ->
                            builds[svc] = {
                                dir("${svc}") {
                                    def imageTag = "${DOCKERHUB_REPO}${svc}:${GIT_TAG}"
                                    echo "üî® Building image: ${imageTag}"
                                    sh 'export DOCKER_BUILDKIT=1 && ../mvnw clean install -P buildDocker -DskipTests'
                                    sh "docker tag springcommunity/${svc}:latest ${imageTag}"
                                    echo "üì§ Pushing image: ${imageTag}"
                                    sh "docker push ${imageTag}"
                                }
                            }
                        }

                        parallel builds
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Tag build succeeded for tag ${GIT_TAG}"
        }
        failure {
            echo "‚ùå Tag build failed"
        }
    }
}
