pipeline {
    agent any

    environment {
        DOCKERHUB_REPO = 'phanphuc269/'
        KUBE_NAMESPACE = 'dev'
        HELM_RELEASE_NAME = 'petclinic'
    }

    parameters {
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch cho vets-service')
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch cho customers-service')
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch cho visits-service')
        string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch cho api-gateway')
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: 'Branch cho config-server')
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: 'Branch cho discovery-server')
        string(name: 'ADMIN_SERVER_BRANCH', defaultValue: 'main', description: 'Branch cho admin-server')
    }

    stages {
        stage('Determine Commit IDs') {
            steps {
                script {
                    def serviceBranchMap = [
                        "vets-service"      : params.VETS_SERVICE_BRANCH,
                        "customers-service" : params.CUSTOMERS_SERVICE_BRANCH,
                        "visits-service"    : params.VISITS_SERVICE_BRANCH,
                        "api-gateway"       : params.API_GATEWAY_BRANCH,
                        "config-server"     : params.CONFIG_SERVER_BRANCH,
                        "discovery-server"  : params.DISCOVERY_SERVER_BRANCH,
                        "admin-server"      : params.ADMIN_SERVER_BRANCH
                    ]

                    // Generate a timestamp for unique namespace
                    def timestamp = sh(script: 'date +%Y%m%d%H%M%S', returnStdout: true).trim()
                    // Get Jenkins build number
                    def buildNumber = env.BUILD_NUMBER
                    // Create a unique namespace name
                    env.KUBE_NAMESPACE = "petclinic-${buildNumber}-${timestamp}"
                    
                    echo "üì¶ DockerHub Repo: ${DOCKERHUB_REPO}"
                    echo "üìÅ K8s Namespace: ${KUBE_NAMESPACE}"
                    echo "üìå Branch info:"
                    
                    // T·∫°o string cho --set arguments
                    def setArguments = ""
                    
                    serviceBranchMap.each { svc, branch ->
                        echo "- ${svc}: ${branch}"
                        
                        def tag = "latest"
                        echo "\nüîç Processing service: ${svc}"
                        echo "   ‚îî‚îÄ Branch: ${branch}"

                        if (branch != "main") {
                            dir("tmp-${svc}") {
                                echo "   üì• Cloning branch '${branch}' from repository..."
                                git branch: branch, url: "https://github.com/phanphuc269/spring-petclinic-microservices.git"
tag = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                                echo "   üÜî Commit ID (tag): ${tag}"
                            }
                        } else {
                            echo "   üè∑ Using tag: latest"
                        }
                        
                        // Add to set arguments string
                        setArguments += " --set services.${svc}.image.tag=${tag}"
                    }
                    
                    // L∆∞u set arguments v√†o environment variable ƒë·ªÉ s·ª≠ d·ª•ng ·ªü stage sau
                    env.HELM_SET_ARGUMENTS = setArguments
                    echo "üîß Helm set arguments: ${env.HELM_SET_ARGUMENTS}"
                }
            }
        }

        stage('Deploy with Helm') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                  script {
                      // Install/upgrade Helm release using --set for each service
                      sh """
                      export KUBECONFIG=$KUBECONFIG_FILE
                      echo "üöÄ Deploying to namespace: ${KUBE_NAMESPACE}"
                      helm upgrade --install ${HELM_RELEASE_NAME} /var/lib/jenkins/helm/helm-petclinic \\
                          --namespace ${KUBE_NAMESPACE} \\
                          --create-namespace \\
                          -f /var/lib/jenkins/helm/helm-petclinic/values.yaml \\
                          ${env.HELM_SET_ARGUMENTS}
                      """
                  }
                }
            }
        }
    }

    post {
        success {
            script {
                def nodePort = sh(script: "kubectl get svc -n ${KUBE_NAMESPACE} api-gateway -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
                def workerNodeIP = sh(script: "kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"ExternalIP\")].address}'", returnStdout: true).trim()
                
                echo """
                ‚úÖ Deployment completed successfully!
                
                üìù Access Information:
                - Namespace: ${KUBE_NAMESPACE}
                - API Gateway: http://${workerNodeIP}:${nodePort}
                - Eureka Dashboard: http://${workerNodeIP}:30002
                - Admin Server: http://${workerNodeIP}:30007
                
                üîß To access the services, add the following to your hosts file:
                ${workerNodeIP} petclinic.local
                """
            }
        }
        failure {
            echo """
            ‚ùå Deployment failed. Check logs for details.
            - Namespace attempted: ${KUBE_NAMESPACE}
            """
        }
        always {
            // Cleanup temporary directories
            sh 'rm -rf tmp-*'
        }
    }
}