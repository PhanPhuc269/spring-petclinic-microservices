pipeline {
    agent any

    environment {
        DOCKERHUB_REPO = 'phanphuc269/'
        KUBE_NAMESPACE = 'dev-review'
        HELM_RELEASE_NAME = 'petclinic'
        HOST = 'phanphuc.id.vn'
    }

    parameters {
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch cho vets-service')
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch cho customers-service')
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch cho visits-service')
        string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch cho api-gateway')
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: 'Branch cho config-server')
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: 'Branch cho discovery-server')
        string(name: 'ADMIN_SERVER_BRANCH', defaultValue: 'main', description: 'Branch cho admin-server')
    }

    stages {
        stage('Determine Commit IDs') {
            steps {
                script {
                    def serviceBranchMap = [
                        "vets-service"      : [branch: params.VETS_SERVICE_BRANCH, path: 'spring-petclinic-vets-service'],
                        "customers-service" : [branch: params.CUSTOMERS_SERVICE_BRANCH, path: 'spring-petclinic-customers-service'],
                        "visits-service"    : [branch: params.VISITS_SERVICE_BRANCH, path: 'spring-petclinic-visits-service'],
                        "api-gateway"       : [branch: params.API_GATEWAY_BRANCH, path: 'spring-petclinic-api-gateway'],
                        "config-server"     : [branch: params.CONFIG_SERVER_BRANCH, path: 'spring-petclinic-config-server'],
                        "discovery-server"  : [branch: params.DISCOVERY_SERVER_BRANCH, path: 'spring-petclinic-discovery-server'],
                        "admin-server"      : [branch: params.ADMIN_SERVER_BRANCH, path: 'spring-petclinic-admin-server']
                    ]

                    def timestamp = sh(script: 'date +%Y%m%d%H%M%S', returnStdout: true).trim()
                    def buildNumber = env.BUILD_NUMBER
                    env.KUBE_NAMESPACE = "petclinic-${buildNumber}-${timestamp}"
                    
                    echo "- DockerHub Repo: ${DOCKERHUB_REPO}"
                    echo "- K8s Namespace: ${KUBE_NAMESPACE}"
                    echo "- Branch info:"
                    
                    def setArguments = ""
                    
                    serviceBranchMap.each { svc, config ->
                        def branch = config.branch
                        def servicePath = config.path
                        echo "- ${svc}: ${branch}"
                        echo "\n...Processing service: ${svc}"
                        echo "   ‚îÄ> Branch: ${branch}"
                        echo "   ‚îÄ> Service path: ${servicePath}"

                        def tag = "latest"
                        dir("tmp-${svc}") {
                            echo "...Cloning branch '${branch}' from repository..."
                            git branch: branch, url: "https://github.com/phanphuc269/spring-petclinic-microservices.git"
                            
                            // T√¨m commit ID m·ªõi nh·∫•t c√≥ thay ƒë·ªïi trong th∆∞ m·ª•c c·ªßa service
                            def commitId = sh(script: "git log -1 --pretty=%h -- ${servicePath}", returnStdout: true).trim()
                            if (commitId) {
                                tag = commitId
                                echo " -> Latest commit ID for ${servicePath}: ${tag}"
                                
                                // Ki·ªÉm tra xem image v·ªõi tag l√† commit ID c√≥ t·ªìn t·∫°i kh√¥ng
                                def imageExists = sh(script: "docker manifest inspect ${DOCKERHUB_REPO}${servicePath}:${tag} > /dev/null 2>&1 && echo 'true' || echo 'false'", returnStdout: true).trim()
                                if (imageExists == 'false') {
                                    echo "   ‚ö†Ô∏è Image ${DOCKERHUB_REPO}${servicePath}:${tag} kh√¥ng t·ªìn t·∫°i, quay l·∫°i d√πng tag 'latest'"
                                    tag = "latest"
                                }
                            } else {
                                echo "   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y commit n√†o thay ƒë·ªïi ${servicePath}, d√πng tag 'latest'"
                            }
                        }
                        // if (branch != "main") {
                        //     dir("tmp-${svc}") {
                        //         echo "   üì• Cloning branch '${branch}' from repository..."
                        //         git branch: branch, url: "https://github.com/phanphuc269/spring-petclinic-microservices.git"
                                
                        //         // T√¨m commit ID m·ªõi nh·∫•t c√≥ thay ƒë·ªïi trong th∆∞ m·ª•c c·ªßa service
                        //         def commitId = sh(script: "git log -1 --pretty=%h -- ${servicePath}", returnStdout: true).trim()
                        //         if (commitId) {
                        //             tag = commitId
                        //             echo "   üÜî Latest commit ID for ${servicePath}: ${tag}"
                                    
                        //             // Ki·ªÉm tra xem image v·ªõi tag l√† commit ID c√≥ t·ªìn t·∫°i kh√¥ng
                        //             def imageExists = sh(script: "docker manifest inspect ${DOCKERHUB_REPO}${svc}:${tag} > /dev/null 2>&1 && echo 'true' || echo 'false'", returnStdout: true).trim()
                        //             if (imageExists == 'false') {
                        //                 echo "   ‚ö†Ô∏è Image ${DOCKERHUB_REPO}${svc}:${tag} kh√¥ng t·ªìn t·∫°i, quay l·∫°i d√πng tag 'latest'"
                        //                 tag = "latest"
                        //             }
                        //         } else {
                        //             echo "   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y commit n√†o thay ƒë·ªïi ${servicePath}, d√πng tag 'latest'"
                        //         }
                        //     }
                        // } else {
                        //     echo "   üè∑ Branch main, using tag: latest"
                        // }
                        
                        // Th√™m v√†o set arguments
                        setArguments += " --set services.${svc}.image.tag=${tag}"
                    }
                    
                    env.HELM_SET_ARGUMENTS = setArguments
                    echo "Helm set arguments: ${env.HELM_SET_ARGUMENTS}"
                }
            }
        }

        stage('Deploy with Helm') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        sh """
                        export KUBECONFIG=$KUBECONFIG_FILE
                        echo "Deploying to namespace: ${KUBE_NAMESPACE}"

                        if [ -d /var/lib/jenkins/helm/helm-petclinic ]; then
                            rm -rf /var/lib/jenkins/helm/helm-petclinic
                        fi

                        git clone https://github.com/PhanPhuc269/helm-petclinic.git /var/lib/jenkins/helm/helm-petclinic

                        kubectl get namespace ${KUBE_NAMESPACE} >/dev/null 2>&1 || \\
                        kubectl create namespace ${KUBE_NAMESPACE}
                        
                        helm upgrade --install ${HELM_RELEASE_NAME} /var/lib/jenkins/helm/helm-petclinic \\
                            --namespace ${KUBE_NAMESPACE} \\
                            -f /var/lib/jenkins/helm/helm-petclinic/values.yaml \\
                            --set namespace=${KUBE_NAMESPACE} \\
                            --set ingress.enabled=true \\
                            ${env.HELM_SET_ARGUMENTS}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                script {
                    def ingressPort = sh(
                        script: """
                            KUBECONFIG=\$KUBECONFIG_FILE kubectl get svc -n ingress-nginx nginx-ingress-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.port==80)].nodePort}'
                        """,
                        returnStdout: true
                    ).trim()
                    echo """
                    ‚úÖ Deployment completed successfully!
                    
                    üìù Access Information:
                    - Namespace: ${KUBE_NAMESPACE}
                    - API Gateway: http://${KUBE_NAMESPACE}-${HELM_RELEASE_NAME}.${HOST}:${ingressPort}
                    - Eureka Dashboard: http://eureka.${KUBE_NAMESPACE}-${HELM_RELEASE_NAME}.${HOST}:${ingressPort}
                    - Admin Server: http://admin.${KUBE_NAMESPACE}-${HELM_RELEASE_NAME}.${HOST}:${ingressPort}
                    """
                }
            }
        }
        failure {
            script {
                echo """
                ‚ùå Deployment failed. Check logs for details.
                - Namespace attempted: ${KUBE_NAMESPACE}
                """
            }
        }
        always {
            sh 'rm -rf tmp-*'
        }
    }
}
